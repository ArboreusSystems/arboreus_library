#parse("Erlang File Header.erl")
-module(${NAME_ATOM}).
#parse("Erlang File Module.erl")
-behaviour(gen_server).

%% API
-export([
	test/0,
	start_link/0,
	init/1,
	handle_call/3,handle_cast/2,handle_info/2,
	terminate/2,
	code_change/3
]).

%% Definitions
-define(SERVER,?MODULE).

%% Data models
-record(${NAME_ATOM}_state, {}).


%% ----------------------------
%% @doc Module test function
-spec test() -> ok.

test() -> ok.


%%%===================================================================
%%% API
%%%===================================================================
%% ----------------------------
%% @doc Spawns the server and registers the local name (unique)
-spec start_link() -> {ok,PID} | ignore | {error,REASON}
	when
		PID :: pid(),
		REASON :: term().

start_link() ->

    gen_server:start_link({local, ?SERVER}, ?MODULE, [], []).


%%%===================================================================
%%% gen_server callbacks
%%%===================================================================
%% ----------------------------
%% @private
%% @doc Initializes the server
-spec init(ARGUMENTS) -> {ok,STATE} | {ok,STATE,TIMEOUT} | {stop,REASON} | ignore
	when
		ARGUMENTS :: term(),
		STATE :: #${NAME_ATOM}_state{},
		TIMEOUT :: timeout() | hibernate,
		REASON :: term().

init([]) ->

    {ok, #${NAME_ATOM}_state{}}.


%% ----------------------------
%% @private
%% @doc Handling call messages
-spec handle_call(REQUEST,FROM,STATE) ->
	{reply,REPLY,NEW_STATE} | {reply,REPLY,NEW_STATE,TIMEOUT} |
	{noreply,NEW_STATE} | {noreply,NEW_STATE,TIMEOUT} |
	{stop,REASON,REPLY,NEW_STATE} | {stop,REASON,NEW_STATE}
	when
		REQUEST :: term(),
		FROM :: {PID,TAG}, PID :: pid(), TAG :: term(),
		REPLY :: term(),
		STATE :: #${NAME_ATOM}_state{},
		NEW_STATE :: #${NAME_ATOM}_state{},
		TIMEOUT :: timeout() | hibernate,
		REASON :: term().

handle_call(_REQUEST,_FROM,STATE = #${NAME_ATOM}_state{}) ->

    {reply, ok, STATE}.


%% ----------------------------
%% @private
%% @doc Handling cast messages
-spec handle_cast(REQUEST,STATE) ->
	{noreply,NEW_STATE} | 	{noreply,NEW_STATE,TIMEOUT} | {stop,REASON,NEW_STATE}
	when
		REQUEST :: term(),
		STATE :: #${NAME_ATOM}_state{},
		NEW_STATE :: #${NAME_ATOM}_state{},
		TIMEOUT :: timeout() | hibernate,
		REASON :: term().

handle_cast(_REQUEST,STATE = #${NAME_ATOM}_state{}) ->

    {noreply, STATE}.


%% ----------------------------
%% @private
%% @doc Handling all non call/cast messages
-spec handle_info(INFO,STATE) ->
	{noreply,NEW_STATE} | {noreply,NEW_STATE,TIMEOUT} | {stop,REASON,NEW_STATE }
	when
		INFO :: timeout() | term(),
		STATE :: #${NAME_ATOM}_state{},
		NEW_STATE :: #${NAME_ATOM}_state{},
		TIMEOUT :: timeout() | hibernate,
		REASON :: term().

handle_info(_INFO,STATE = #${NAME_ATOM}_state{}) ->

    {noreply, STATE}.


%% ----------------------------
%% @private
%% @doc This function is called by a gen_server when it is about to
%% terminate. It should be the opposite of Module:init/1 and do any
%% necessary cleaning up. When it returns, the gen_server terminates
%% with Reason. The return value is ignored.
-spec terminate(REASON,STATE) -> term()
	when
		REASON :: normal | shutdown | {shutdown,term()} | term(),
		STATE :: #${NAME_ATOM}_state{}.

terminate(_REASON,_STATE = #${NAME_ATOM}_state{}) ->

    ok.


%% ----------------------------
%% @private
%% @doc Convert process state when code is changed
-spec code_change(OLD_VERSION,STATE,EXTRA) -> {ok,NEW_STATE} | {error,REASON}
	when
		OLD_VERSION :: term() | {down,term()},
		STATE :: #${NAME_ATOM}_state{},
		NEW_STATE :: #${NAME_ATOM}_state{},
		EXTRA :: term(),
		REASON :: term().

code_change(_OLD_VERSION,STATE = #${NAME_ATOM}_state{},_EXTRA) ->

    {ok, STATE}.


%%%===================================================================
%%% Internal functions
%%%===================================================================
