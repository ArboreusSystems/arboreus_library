#parse("Erlang File Header.erl")
-module(${NAME_ATOM}).
#parse("Erlang File Module.erl")
-behaviour(supervisor).

%% API
-export([
	test/0,
	start_link/0,
	init/1
]).

%% Definitions
-define(SERVER,?MODULE).


%% ----------------------------
%% @doc Module test function
-spec test() -> ok.

test() -> ok.


%%%===================================================================
%%% API functions
%%%===================================================================
%% ----------------------------
%% @doc Starts the supervisor
-spec start_link() -> {ok,PID} | ignore | {error,REASON}
	when
		PID :: pid(),
		REASON :: term().

start_link() ->

	supervisor:start_link({local,?SERVER},?MODULE,[]).


%%%===================================================================
%%% Supervisor callbacks
%%%===================================================================
%% ----------------------------
%% @private
%% @doc Whenever a supervisor is started using supervisor:start_link/[2,3],
%% this function is called by the new process to find out about
%% restart strategy, maximum restart frequency and child
%% specifications.
-spec init(ARGUMENTS) -> {ok,{SUPERVISOR_FLAGS,SPECIFICATIONS}} | ignore | {error,REASON}
	when
		ARGUMENTS :: term(),
		SUPERVISOR_FLAGS :: {RESTART_STRATEGY,MAX_RESTART,MAX_TIME},
		SPECIFICATIONS :: [CHILD_SPECIFICATION],
		CHILD_SPECIFICATION :: supervisor:child_spec(),
		RESTART_STRATEGY :: supervisor:strategy(),
		MAX_RESTART :: non_neg_integer(),
		MAX_TIME :: non_neg_integer(),
		REASON :: term().

init([]) ->

	MAX_RESTART = 1000,
	MAX_TIME_BETWEEN_RESTARTS = 3600,
	SUPERVISOR_FLAGS = #{
		strategy => one_for_one,
		intensity => MAX_RESTART,
		period => MAX_TIME_BETWEEN_RESTARTS
	},

	A_CHILD = #{
		id => 'AName',
		start => {'AModule',start_link,[]},
		restart => permanent,
		shutdown => 2000,
		type => worker,
		modules => ['AModule']
	},

	{ok,{SUPERVISOR_FLAGS,[A_CHILD]}}.


%%%===================================================================
%%% Internal functions
%%%===================================================================
